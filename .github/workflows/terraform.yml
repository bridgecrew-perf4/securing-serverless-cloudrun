name: Create GCP Infrastructure

on: push

env:
  GCP_PROJECT: ${{ secrets.PROJECT_ID }}
  BUCKET_NAME: "${{ secrets.PROJECT_ID }}-tfstate"
  SA_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

jobs:
      
  create-gcp-bucket:
    name: 'GCP Bucket Creation'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        project_id: ${{ secrets.PROJECT_ID }}
        export_default_credentials: true 
    
    # Create a GCS bucket to store Terraform state
    - name: 'Create Bucket & Enable Object Versioning'
      run: |-
        gsutil mb gs://"$BUCKET_NAME" || echo "Bucket Already Exists"
        gsutil versioning set on gs://"$BUCKET_NAME" || echo "Versioning Already Enabled"
  
  terraform:
    name: 'Terraform'
    needs: 'create-gcp-bucket'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure it
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |-     
        cd terraform/
        terraform init -backend-config "credentials=$SA_CREDENTIALS" -backend-config "bucket=$BUCKET_NAME"
   
    # Valdate the configuration files in a directory
    - name: Terraform Validate
      run: |-
        cd terraform/
        terraform validate

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |-
        cd terraform/
        terraform plan -var "credentials=$SA_CREDENTIALS" -var "project=$GCP_PROJECT" -var "bucket=$BUCKET_NAME"

      # On push to master, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      run: |-
        cd terraform/
        terraform apply -var "credentials=$SA_CREDENTIALS" -var "project=$GCP_PROJECT" -var "bucket=$BUCKET_NAME" -auto-approve
    
      # Repository Dispatch is used to ensure that the terraform action runs before the deploy action 
      # It requires you to create a Github personal access token and save it in your secrets
      # https://github.com/marketplace/actions/repository-dispatch
    - name: Repository Dispatch
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        event-type: my-event